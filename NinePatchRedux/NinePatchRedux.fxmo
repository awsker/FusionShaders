// NinePatchRedux

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform float xScale;
uniform float yScale;
uniform int repeat;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;
out vec4 fragColor;

const float ONETHIRD = 1.0 / 3.0;

void main(void)
{
    float chunkWidth = 1.0 / (3.0 * xScale);
    float chunkHeight = 1.0 / (3.0 * yScale);

    vec2 newCoord;

    if(repeat > 0) {
        newCoord = vec2(
            ONETHIRD * mod(textureCoordinate.x - chunkWidth, chunkWidth) / chunkWidth + ONETHIRD, 
            ONETHIRD * mod(textureCoordinate.y - chunkHeight, chunkHeight) / chunkHeight + ONETHIRD);
    } else {
        newCoord = vec2(
            ONETHIRD * (textureCoordinate.x - chunkWidth) / (1.0 - 2.0 * chunkWidth) + ONETHIRD,
            ONETHIRD * (textureCoordinate.y - chunkHeight) / (1.0 - 2.0 * chunkHeight) + ONETHIRD);
    }

    if(textureCoordinate.x < chunkWidth) {
        newCoord.x = ONETHIRD * textureCoordinate.x / chunkWidth;
    }
    if(textureCoordinate.x > 1.0 - chunkWidth) {
        newCoord.x = ONETHIRD*(2.0 + (textureCoordinate.x - 1.0 + chunkWidth) / chunkWidth);
    }
    if(textureCoordinate.y < chunkHeight) {
        newCoord.y = ONETHIRD * textureCoordinate.y / chunkHeight;
    }
    if(textureCoordinate.y > 1.0 - chunkHeight) {
        newCoord.y = ONETHIRD*(2.0 + (textureCoordinate.y - 1.0 + chunkHeight) / chunkHeight);
    }
    vec4 color = texture(imgTexture, newCoord);
    fragColor = color * blendColor;
}